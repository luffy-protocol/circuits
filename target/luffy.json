{"noir_version":"0.23.0+5be9f9d7e2f39ca228df10e5a530474af0331704","hash":4017910460484574929,"abi":{"parameters":[{"name":"signer_pub_x_key","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"signer_pub_y_key","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"signature","type":{"kind":"array","length":64,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"selected_players_points","type":{"kind":"array","length":11,"type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}},"visibility":"private"},{"name":"player_points_merkle_paths","type":{"kind":"array","length":11,"type":{"kind":"array","length":6,"type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}}},"visibility":"private"},{"name":"all_player_points_merkle_root","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"captain","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"},{"name":"viceCaptain","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"},{"name":"isRandom","type":{"kind":"boolean"},"visibility":"public"},{"name":"selected_player_ids","type":{"kind":"array","length":11,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"selected_squad_hash","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"claimed_player_points","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"public"}],"param_witnesses":{"all_player_points_merkle_root":[{"start":2592,"end":2624}],"captain":[{"start":2624,"end":2625}],"claimed_player_points":[{"start":2670,"end":2671}],"isRandom":[{"start":2626,"end":2627}],"player_points_merkle_paths":[{"start":480,"end":2592}],"selected_player_ids":[{"start":2627,"end":2638}],"selected_players_points":[{"start":128,"end":480}],"selected_squad_hash":[{"start":2638,"end":2670}],"signature":[{"start":64,"end":128}],"signer_pub_x_key":[{"start":0,"end":32}],"signer_pub_y_key":[{"start":32,"end":64}],"viceCaptain":[{"start":2625,"end":2626}]},"return_type":null,"return_witnesses":[]},"bytecode":"","debug_symbols":"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","file_map":{"25":{"source":"mod hash;\nmod array;\nmod slice;\nmod merkle;\nmod schnorr;\nmod ecdsa_secp256k1;\nmod ecdsa_secp256r1;\nmod eddsa;\nmod grumpkin_scalar;\nmod grumpkin_scalar_mul;\nmod scalar_mul;\nmod sha256;\nmod sha512;\nmod field;\nmod ec;\nmod unsafe;\nmod collections;\nmod compat;\nmod option;\nmod string;\nmod test;\nmod cmp;\nmod ops;\nmod default;\nmod prelude;\nmod uint128;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(_with_newline: bool, _input: T) {}\n\nunconstrained pub fn print<T>(input: T) {\n    print_oracle(false, input);\n}\n\nunconstrained pub fn println<T>(input: T) {\n    print_oracle(true, input);\n}\n\n#[foreign(recursive_aggregation)]\npub fn verify_proof<N>(_verification_key: [Field], _proof: [Field], _public_inputs: [Field], _key_hash: Field) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(_x: T) {}\n// from_field and as_field are private since they are not valid for every type.\n// `as` should be the default for users to cast between primitive types, and in the future\n// traits can be used to work with generic types.\n#[builtin(from_field)]\nfn from_field<T>(_x: Field) -> T {}\n\n#[builtin(as_field)]\nfn as_field<T>(_x: T) -> Field {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T {\n    crate::from_field(crate::as_field(x) + crate::as_field(y))\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T {\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    crate::from_field(crate::as_field(x) + 340282366920938463463374607431768211456 - crate::as_field(y))\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T {\n    crate::from_field(crate::as_field(x) * crate::as_field(y))\n}\n","path":"std/lib.nr"},"43":{"source":"mod tests;\nuse dep::std;\nuse dep::ecrecover;\n\nglobal MERKLE_DEPTH = 6;\nfn main(\n    signer_pub_x_key: [u8; 32],\n    signer_pub_y_key: [u8; 32],\n    signature: [u8; 64],\n    selected_players_points: [[u8; 32]; 11],\n    player_points_merkle_paths: [[[u8; 32]; MERKLE_DEPTH]; 11],\n    all_player_points_merkle_root: [u8; 32],\n    captain: pub u8,\n    viceCaptain: pub u8,\n    isRandom: pub bool,\n    selected_player_ids: pub [u8; 11],\n    selected_squad_hash: pub [u8; 32],\n    claimed_player_points: pub u64\n) {\n    ecdsa_verification(\n        signer_pub_x_key,\n        signer_pub_y_key,\n        signature,\n        selected_squad_hash\n    );\n\n    verify_squad_hash(selected_player_ids, selected_squad_hash);\n\n    // verify_all_merkle_roots(\n    //     selected_player_ids,\n    //     selected_players_points,\n    //     player_points_merkle_paths,\n    //     all_player_points_merkle_root\n    // );\n\n    let mut calculated_total_points: u64 = 0;\n    let mut counter: u8 = 0;\n    let mut captainMultiplier: u64 = 0;\n    let mut viceCaptainMultiplier: u64 = 0;\n\n    if isRandom {\n        captainMultiplier = 4;\n        viceCaptainMultiplier = 3;\n    } else {\n        captainMultiplier = 3;\n        viceCaptainMultiplier = 2;\n    }\n\n    for point in selected_players_points {\n        let mut player_point: u64 = 0;\n        for byte in point {\n            player_point += byte as u64;\n        }\n        if counter == captain {\n            player_point = player_point * captainMultiplier;\n        } else if counter == viceCaptain {\n            player_point = player_point * viceCaptainMultiplier;\n        }\n        calculated_total_points += player_point;\n        counter += 1;\n    }\n\n    assert(calculated_total_points == claimed_player_points);\n}\n\nfn verify_squad_hash(player_ids: [u8; 11], squad_hash: [u8; 32]) {\n    let computed_squad_hash= std::hash::keccak256(player_ids, 11);\n    assert(computed_squad_hash == squad_hash);\n}\n\nfn ecdsa_verification(\n    signer_pub_x_key: [u8; 32],\n    signer_pub_y_key: [u8; 32],\n    signature: [u8; 64],\n    hash: [u8; 32]\n) {\n    let computedAddress: Field = ecrecover::secp256k1::PubKey::from_xy(signer_pub_x_key, signer_pub_y_key).to_eth_address(); // Compute address from public key\n    let recoveredAddress = ecrecover::ecrecover(signer_pub_x_key, signer_pub_y_key, signature, hash);\n\n    println(f\"Computed address: {computedAddress}\");\n    println(f\"Recovered address: {recoveredAddress}\");\n    assert(computedAddress == recoveredAddress);\n}\n\nfn verify_all_merkle_roots(\n    player_ids: [u8; 11],\n    players_points: [[u8; 32]; 11],\n    merkle_paths: [[[u8; 32]; MERKLE_DEPTH]; 11],\n    merkle_root: [u8; 32]\n) {\n    for i in 0..11 {\n        compute_and_verify_merkle_root(players_points[i], player_ids[i], merkle_paths[i], merkle_root);\n    }\n}\n\nfn compute_and_verify_merkle_root(\n    leaf: [u8; 32],\n    leaf_index: u8,\n    proof: [[u8; 32]; MERKLE_DEPTH],\n    all_points_merkle_root: [u8; 32]\n) {\n    let mut computed_merkle_root: [u8; 32] = [0; 32];\n    computed_merkle_root=leaf;\n    let mut leaf_index_mut= leaf_index;\n    for i in 0..MERKLE_DEPTH {\n        if leaf_index_mut % 2 == 0 {\n            computed_merkle_root = std::hash::keccak256(concatenate_leafs(computed_merkle_root, proof[i]), 64);\n        } else {\n            computed_merkle_root = std::hash::keccak256(concatenate_leafs(proof[i], computed_merkle_root), 64);\n        }\n        leaf_index_mut = leaf_index_mut / 2;\n    }\n\n    println(f\"Computed merkle root: {computed_merkle_root}\");\n    println(f\"All points merkle root: {all_points_merkle_root}\");\n    assert(computed_merkle_root == all_points_merkle_root);\n}\n\nfn concatenate_leafs(leaf1: [u8; 32], leaf2: [u8; 32]) -> [u8; 64] {\n    let mut arr: [u8; 64] = [0; 64];\n    for i in 0..32 {\n        arr[i] = leaf1[i];\n        arr[i + 32] = leaf2[i];\n    }\n    arr\n}\n","path":"/Users/gabrielantonyxaviour/Developer/projects/luffy/circuits/src/main.nr"},"44":{"source":"use dep::std;\n \nmod secp256k1;\n\nfn ecrecover(\n    pub_key_x: [u8; 32],\n    pub_key_y: [u8; 32],\n    signature: [u8; 64], // clip v value\n    hashed_message: [u8; 32]\n) -> Field {\n    let key = secp256k1::PubKey::from_xy(pub_key_x, pub_key_y);\n\n    assert(key.verify_sig(signature, hashed_message));\n    let addr = key.to_eth_address();\n\n    addr\n}\n\n#[test]\nfn test_ecrecover() {\n    let pub_key_x = [131, 24, 83, 91, 84, 16, 93, 74, 122, 174, 96, 192, 143, 196, 95, 150, 135, 24, 27, 79, 223, 198, 37, 189, 26, 117, 63, 167, 57, 127, 237, 117];\n    let pub_key_y = [53, 71, 241, 28, 168, 105, 102, 70, 242, 243, 172, 176, 142, 49, 1, 106, 250, 194, 62, 99, 12, 93, 17, 245, 159, 97, 254, 245, 123, 13, 42, 165];\n    let signature = [57, 17, 112, 239, 241, 30, 64, 157, 170, 50, 85, 145, 156, 69, 226, 85, 147, 164, 10, 82, 71, 93, 42, 132, 200, 220, 161, 255, 95, 241, 211, 141, 81, 7, 150, 25, 25, 27, 162, 213, 80, 61, 12, 170, 50, 4, 154, 203, 252, 229, 119, 29, 202, 153, 50, 25, 126, 145, 245, 23, 136, 75, 29, 177];\n    let hashed_message = [13, 82, 120, 60, 76, 186, 215, 235, 175, 126, 185, 67, 252, 100, 143, 82, 130, 165, 32, 112, 68, 47, 193, 141, 141, 209, 109, 219, 47, 203, 175, 102];\n\n    let addr = ecrecover(pub_key_x, pub_key_y, signature, hashed_message);\n    assert(addr == 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266);\n}\n","path":"/Users/gabrielantonyxaviour/nargo/github.com/colinnielsen/ecrecover-noirv0.19.0/src/lib.nr"},"45":{"source":"use dep::std;\n\nuse dep::array_helpers;\n\nstruct PubKey {\n    pub_x: [u8; 32],\n    pub_y: [u8; 32],\n}\n\nunconstrained\nfn split_uncompressed_pub_key(\n    pub_key: [u8; 65]\n) -> ([u8; 32], [u8; 32]) {\n    let mut pub_key_x: [u8; 32] = [0; 32];\n    let mut pub_key_y: [u8; 32] = [0; 32];\n\n    for i in 0..32 {\n        pub_key_x[i] = pub_key[i + 1];\n        pub_key_y[i] = pub_key[i + 32 + 1];\n    };\n\n    (pub_key_x, pub_key_y)\n}\n\nimpl PubKey {\n    fn from_xy(pub_x: [u8; 32], pub_y: [u8; 32]) -> PubKey {\n        PubKey {\n            pub_x,\n            pub_y,\n        }\n    }\n\n    fn from_unified(pub_key: [u8; 64]) -> PubKey {\n        let (key_x, key_y) = array_helpers::split_u8_64_unconstrained(pub_key);\n\n        PubKey {\n            pub_x: key_x,\n            pub_y: key_y,\n        }\n    }\n\n    fn from_uncompressed(pub_key: [u8; 65]) -> PubKey {\n        assert(pub_key[0] == 0x04);\n        let (key_x, key_y) = split_uncompressed_pub_key(pub_key);\n\n        PubKey {\n            pub_x: key_x,\n            pub_y: key_y,\n        }\n    }\n\n    fn verify_sig(self, signature: [u8; 64], hashed_message: [u8; 32]) -> bool {\n        std::ecdsa_secp256k1::verify_signature(self.pub_x, self.pub_y, signature, hashed_message)\n    }\n\n    fn to_eth_address(self) -> Field {\n        let pub_key = array_helpers::u8_32_to_u8_64_unconstrained(self.pub_x, self.pub_y);\n        let hashed_pub_key = std::hash::keccak256(pub_key, 64);\n\n        let mut addr: Field = 0;\n        for i in 0..20 {\n            // shift left by 8 and add the new value\n            addr = (addr * 256) + hashed_pub_key[i + 12] as Field;\n        }\n\n        addr\n    }\n\n    fn ecrecover(\n        self,\n        signature: [u8; 64],\n        hashed_message: [u8; 32]\n    ) -> Field {\n        assert(self.verify_sig(signature, hashed_message));\n\n        self.to_eth_address()\n    }\n}\n\n\n#[test]\nfn test_ecrecover_via_key() {\n    let pub_key_x = [131, 24, 83, 91, 84, 16, 93, 74, 122, 174, 96, 192, 143, 196, 95, 150, 135, 24, 27, 79, 223, 198, 37, 189, 26, 117, 63, 167, 57, 127, 237, 117];\n    let pub_key_y = [53, 71, 241, 28, 168, 105, 102, 70, 242, 243, 172, 176, 142, 49, 1, 106, 250, 194, 62, 99, 12, 93, 17, 245, 159, 97, 254, 245, 123, 13, 42, 165];\n    let signature = [57, 17, 112, 239, 241, 30, 64, 157, 170, 50, 85, 145, 156, 69, 226, 85, 147, 164, 10, 82, 71, 93, 42, 132, 200, 220, 161, 255, 95, 241, 211, 141, 81, 7, 150, 25, 25, 27, 162, 213, 80, 61, 12, 170, 50, 4, 154, 203, 252, 229, 119, 29, 202, 153, 50, 25, 126, 145, 245, 23, 136, 75, 29, 177];\n    let hashed_message = [13, 82, 120, 60, 76, 186, 215, 235, 175, 126, 185, 67, 252, 100, 143, 82, 130, 165, 32, 112, 68, 47, 193, 141, 141, 209, 109, 219, 47, 203, 175, 102];\n\n    let key = PubKey::from_xy(pub_key_x, pub_key_y);\n    assert(key.ecrecover(signature, hashed_message) == 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266);\n}\n","path":"/Users/gabrielantonyxaviour/nargo/github.com/colinnielsen/ecrecover-noirv0.19.0/src/secp256k1.nr"},"46":{"source":"use dep::std;\n\nfn u8_32s_to_u64_16(\n    arr_a: [u8; 32],\n    arr_b: [u8; 32],\n) -> [u64; 16] {\n    let mut combined_u64: [u64; 16] = [0; 16];\n    \n    for i in 0..4 {\n        let mut value: u64 = 0;\n        for j in 0..8 {\n            value |= (arr_a[i*8+j] as u64) << ((56 - j*8) as u64);\n        }\n         combined_u64[i] = value;\n    }\n    for i in 4..8 {\n        let mut value: u64 = 0;\n        for j in 0..8 {\n            value |= (arr_b[(i-4)*8+j] as u64) << ((56 - j*8) as u64);\n        }\n         combined_u64[i] = value;\n    }\n\n    combined_u64\n}\n\nunconstrained\nfn u8_32s_to_u64_16_unconstrained(\n    arr_a: [u8; 32],\n    arr_b: [u8; 32],\n) -> [u64; 16] {\n    let mut combined_u64: [u64; 16] = [0; 16];\n    \n    for i in 0..4 {\n        let mut value: u64 = 0;\n        for j in 0..8 {\n            value |= (arr_a[i*8+j] as u64) << ((56 - j*8) as u64);\n        }\n         combined_u64[i] = value;\n    }\n    for i in 4..8 {\n        let mut value: u64 = 0;\n        for j in 0..8 {\n            value |= (arr_b[(i-4)*8+j] as u64) << ((56 - j*8) as u64);\n        }\n         combined_u64[i] = value;\n    }\n\n    combined_u64\n}\n\n#[test]\nfn test_u8_32s_to_u64_16() {\n    let arr_a: [u8; 32] = [\n        131,24,83,91,84,16,93,74,122,174,96,192,143,196,95,150,135,24,27,79,223,198,37,189,26,117,63,167,57,127,237,117\n    ];\n    let arr_b: [u8; 32] = [\n        53,71,241,28,168,105,102,70,242,243,172,176,142,49,1,106,250,194,62,99,12,93,17,245,159,97,254,245,123,13,42,165\n    ];\n    let out = u8_32s_to_u64_16(arr_a, arr_b);\n\n    assert(out[0] == 9446391870127103306);\n    assert(out[1] == 8840109498736861078);\n    assert(out[2] == 9734560624431998397);\n    assert(out[3] == 1906500004718046581);\n    assert(out[4] == 3839302312743495238);\n    assert(out[5] == 17506526050819047786);\n    assert(out[6] == 18069073250093961717);\n    assert(out[7] == 11484740855056378533);\n    assert(out[8] == 0);\n    assert(out[9] == 0);\n    assert(out[10] == 0);\n    assert(out[11] == 0);\n    assert(out[12] == 0);\n    assert(out[13] == 0);\n    assert(out[14] == 0);\n    assert(out[15] == 0);\n    // the above output is the hex \"0x8318535b54105d4a7aae60c08fc45f9687181b4fdfc625bd1a753fa7397fed753547f11ca8696646f2f3acb08e31016afac23e630c5d11f59f61fef57b0d2aa5\"\n}\n\nfn u8_32_to_u8_64(\n    arr_a: [u8; 32],\n    arr_b: [u8; 32],\n) -> [u8; 64] {\n    let mut combined: [u8; 64] = [0; 64];\n\n    for i in 0..32 {\n        combined[i] = arr_a[i];\n    }\n    for i in 0..32 {\n        combined[i + 32] = arr_b[i];\n    }\n\n    combined\n}\n\nunconstrained\nfn u8_32_to_u8_64_unconstrained(\n    arr_a: [u8; 32],\n    arr_b: [u8; 32],\n) -> [u8; 64] {\n    let mut combined: [u8; 64] = [0; 64];\n\n    for i in 0..32 {\n        combined[i] = arr_a[i];\n    }\n    for i in 0..32 {\n        combined[i + 32] = arr_b[i];\n    }\n\n    combined\n}\n\n\nfn u64_4_to_u8_32(\n    array: [u64; 4]\n) -> [u8; 32] {\n    let mut output: [u8; 32] = [0; 32];\n    let mut output_index = 0;\n\n    for num_idx in 0..4 {\n        for bit_pos in 0..8 {\n            let shift_amount: u64 = 56 - (bit_pos * 8) as u64;\n            output[output_index] = ((array[num_idx] >> shift_amount) & 255) as u8;\n            output_index += 1;\n        }\n    }\n\n    output\n}\n\nunconstrained\nfn u64_4_to_u8_32_unconstrained(\n    array: [u64; 4]\n) -> [u8; 32] {\n    let mut output: [u8; 32] = [0; 32];\n    let mut output_index = 0;\n\n    for num_idx in 0..4 {\n        for bit_pos in 0..8 {\n            let shift_amount: u64 = 56 - (bit_pos * 8) as u64;\n            output[output_index] = ((array[num_idx] >> shift_amount) & 255) as u8;\n            output_index += 1;\n        }\n    }\n\n    output\n}\n\n#[test]\nfn test_u64_4_to_u8_32() {\n    let hash: [u64; 4] = [\n        999647796417551690,\n        8840109498736861078,\n        9734560624431998397,\n        1906500004718046581\n    ];\n \n    let arr_out = u64_4_to_u8_32(hash);\n\n    assert(arr_out[0] == 13);\n    assert(arr_out[1] == 223);\n    assert(arr_out[2] == 118);\n    assert(arr_out[3] == 95);\n    assert(arr_out[4] == 221);\n    assert(arr_out[5] == 248);\n    assert(arr_out[6] == 93);\n    assert(arr_out[7] == 74);\n    assert(arr_out[8] == 122);\n    assert(arr_out[9] == 174);\n    assert(arr_out[10] == 96);\n    assert(arr_out[11] == 192);\n    assert(arr_out[12] == 143);\n    assert(arr_out[13] == 196);\n    assert(arr_out[14] == 95);\n    assert(arr_out[15] == 150);\n    assert(arr_out[16] == 135);\n    assert(arr_out[17] == 24);\n    assert(arr_out[18] == 27);\n    assert(arr_out[19] == 79);\n    assert(arr_out[20] == 223);\n    assert(arr_out[21] == 198);\n    assert(arr_out[22] == 37);\n    assert(arr_out[23] == 189);\n    assert(arr_out[24] == 26);\n    assert(arr_out[25] == 117);\n    assert(arr_out[26] == 63);\n    assert(arr_out[27] == 167);\n    assert(arr_out[28] == 57);\n    assert(arr_out[29] == 127);\n    assert(arr_out[30] == 237);\n    assert(arr_out[31] == 117);\n}\n\n/// @dev this method is used to convert a u8 array to a u160 (which is not supported by Noir, so it's represented as a Field)\n/// @dev will throw on Field overflow\nfn u8_to_u160(\n    array: [u8]\n) -> Field {\n    let mut addr: Field = 0;\n\n    for i in 0..20 {\n        // only take the last 20 bytes of the hash\n        addr = (addr * 256) + (array[i] as Field);\n    }\n\n    addr\n}\n\nunconstrained\nfn u8_to_u160_unconstrained(\n    array: [u8]\n) -> Field {\n    let mut addr: Field = 0;\n\n    for i in 0..20 {\n        // only take the last 20 bytes of the hash\n        addr = (addr * 256) + (array[i] as Field);\n    }\n\n    addr\n}\n\nfn u8_to_eth_address(\n    array: [u8]\n) -> Field {\n    u8_to_u160(array)\n}\n\nunconstrained\nfn u8_to_eth_address_unconstrained(\n    array: [u8]\n) -> Field {\n    u8_to_u160(array)\n}\n\n#[test]\nfn test_u8_32_to_u160() {\n    // keccak hash of hardhat 0 address pub key (0xc1ffd3cfee2d9e5cd67643f8f39fd6e51aad88f6f4ce6ab8827279cfffb92266) as u8 array\n    let hashed_pub_key = [\n        193,255,211,207,238,45,158,92,214,118,67,248,243,159,214,229,26,173,136,246,244,206,106,184,130,114,121,207,255,185,34,102\n    ];\n\n    let mut right_20_bytes: [u8] = [0; 20];\n    for i in 0..20 {\n        right_20_bytes[i] = hashed_pub_key[i + 12];\n    }\n\n    let addr = u8_to_u160(right_20_bytes);\n    let addr_aliased = u8_to_eth_address(right_20_bytes);\n\n    assert(addr == addr_aliased);\n    assert(addr == 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266); // hardhat address 0\n}\n\nfn split_u8_64(\n    arr: [u8; 64]\n) -> ([u8; 32], [u8; 32]) {\n    let mut arr_a: [u8; 32] = [0; 32];\n    let mut arr_b: [u8; 32] = [0; 32];\n\n    for i in 0..32 {\n        arr_a[i] = arr[i];\n        arr_b[i] = arr[i + 32];\n    };\n\n    (arr_a, arr_b)\n}\n\nunconstrained\nfn split_u8_64_unconstrained(\n    arr: [u8; 64]\n) -> ([u8; 32], [u8; 32]) {\n    let mut arr_a: [u8; 32] = [0; 32];\n    let mut arr_b: [u8; 32] = [0; 32];\n\n    for i in 0..32 {\n        arr_a[i] = arr[i];\n        arr_b[i] = arr[i + 32];\n    };\n\n    (arr_a, arr_b)\n}\n\n#[test]\nfn test_split_u8_64() {\n    let u8_64 = [\n        193,255,211,207,238,45,158,92,214,118,67,248,243,159,214,229,26,173,136,246,244,206,106,184,130,114,121,207,255,185,34,102,\n        193,255,211,207,238,45,158,92,214,118,67,248,243,159,214,229,26,173,136,246,244,206,106,184,130,114,121,207,255,185,34,102\n    ];\n\n    let (arr_a, arr_b) = split_u8_64(u8_64);\n\n    for i in 0..32 {\n        assert(arr_a[i] == u8_64[i]);\n        assert(arr_b[i] == u8_64[i + 32]);\n    }\n}\n","path":"/Users/gabrielantonyxaviour/nargo/github.com/colinnielsen/noir-array-helpersv0.19.0/src/lib.nr"}}}